"""
파이썬이 제공하는 유용한 기능중 하나로 패턴에 잘 대응된다는 장점이 있다.
모든 코드에 적용될 수 있으며 사전조건, 사후조건을 가지고 있다.
주요 동작의 전후에 작업을 실행하려고 할 때 유용하다.(데코레이터 원리인가...?)

일반적으로는 리소스 관리와 관련해서 컨텍스트 관리자를 자주볼 수 있다고 한다.
예) 파일을 열면 작업이 끝나면 적절히 닫히기를 기대함(디스크립터 누수 방지)
예2) 서비스나 소켓에 대한 연결을 열었을 때 적절하게 닫거나 임시 파일을 제거

보통 가능한 모든 조합과 실행 경로를 처리하여 디버깅하는 것이 어렵기에
이 문제를 해결하기 위해서는 finally 블록에 정리 코드를 넣는 경우가 있다.
"""
fd = open(filename)
try:
    process_file(fd)
finally:
    fd.close()

"""
이것을 파이썬스럽게 구현한다면?
"""
with open(filename) as fd:
    process_file(fd)
"""
with 문이 컨텐스트 관리자로 진입하게 한다.
위 경우 open함수는 컨텐스트 관리자 프로토콜을 구현한다.
예외가 발생한 경우에도 블록이 완료되면 파일이 자동으로 닫힌다.

컨텍스트 관리자는 __enter__와 __exit__ 두개의 매직 메서드로 구성된다.
with 문은 __enter__ 메서드를 호출하고 이 메서드를 무엇을 반환하든 as 이후에 지정된 변수에 할당된다.
__enter__ 메서드가 특정한 값을 반환할 필요는 없고 값을 반환한다고 하더라도 필요하지 않으면 변수에 할당하지 않아도 된다.

위 라인 실행 후 다른 코드가 실행될 수 있는 새로우 컨텍스트로 진입하고,
마지막 문장이 끝나면 컨텍스트가 종료되며 파이썬이 처음 호출한 원래 컨텍스트 관리자 객체의 __exit__ 메서드를 호출한다.

블록 내에 예외 또는 오류가 있는 경우에도 __exit__ 메서드가 호출되기에 정리 조건을 안전하게 실행하는데 편하다.
(예외를 파라미터로 받기 때문에 예외 발생시 임의의 방법으로 처리 가능)
"""

"""
컨텍스트 관리자는 블록의 전후에 필요로 하는 특정 논리를 제공하기 위해 자체 컨텍스트 관리자를 구현할 수 도 있다.
관심사를 분리하고 독립적으로 유지되어야 하는 코드를 분리하는 매우 좋은 방법이라고 한다.

책에서는 "데이터베이스 백업"을 하는 경우를 예로 들어줬는데,
백업은 데이터베이스가 실행되고 있지 않는 동안인 오프라인 상태에서 해야하고
백업이 끝나면 프로세스를 다시 시작해야 하기 때문이다.
"""

"""
첫번째 방법, 백업 후 예외 및 특이사항 처리 후 서비스를 다시 시작하는 단일 함수 구현
"""
def stop_database():
    run("systemctl stop postgresql.service")

def start_database():
    run("systemctl start postgresql.service")

class DBHandler:
    def __enter__(self):
        stop_database()
        return self
    
    def __exit__(self, exc_type, ex_value, ex_traceback):
        start_database()

def db_backup():
    run("pg_dump database")

def main():
    with DBHandler():
        db_backup()

"""
위 예제는 DBHandler를 사용한 블록에서 컨텍스트 관리자의 결과를 사용하지 않은 것이다.
위 경우에 __enter__의 반환 값은 쓸모가 없다고 한다.

일반적으로 __enter__에서 무언가를 반환하는 것이 좋은 습관이라고 한다.
main()에서는 유지보수 작업과 상관없이 백업을 실행하고. 백업에 오류가 있어도 __exit__을 호출한다.
__exit__ 메서드는 블록에서 발생한 예외를 파라미터로 받고 블록에 예외가 없으면 모두 None이다.

특별한 작업을 할 필요가 없다면 __exit__에서 아무것도 반환하지 않아도 된다고 한다.
__exit__이 만약 True를 반환하면 잠재적으로 발생한 예외를 호출자에서 전과안하고 멈춘다는 뜻이다.
일반적으로는 이렇게 구현하며 예외를 삼키는 것은 좋지 않는 습관이라고 한다.
(오류를 무시해버리면 안된다)
"""